{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Products","props","state","sortBy","sortDirection","filterText","products","id","qty","price","name","product","index","this","indexOf","splice","setState","evt","Date","Math","floor","random","toString","push","item","target","value","newProducts","slice","map","key","onProductTableUpdate","handleProductTable","bind","onRowAdd","handleAddEvent","onRowDel","handleRowDel","React","Component","ProductTable","rowDel","onDelEvent","type","onClick","className","reduce","accumulator","ProductRow","cellData","EditableCell","onChange","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a04f7067.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\nclass Products extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     sortBy: null,\n     sortDirection: true\n    };\n    this.state.filterText = \"\";\n    this.state.products = [\n      {\n        id: 1,\n        qty: 4,\n        price: '5.99',\n        name: 'Футболка'\n      }, {\n        id: 2,\n        qty: 2,\n        price: '19.99',\n        name: 'Штани'\n      }, {\n        id: 3,\n        qty: 3,\n        price: '29.99',\n        name: 'Кофта'\n      }, {\n        id: 4,\n        qty: 4,\n        price: '2.99',\n        name: 'Шкарпетки'\n      }\n    ];\n\n  }\n\n  handleRowDel(product) {\n    var index = this.state.products.indexOf(product);\n    this.state.products.splice(index, 1);\n    this.setState(this.state.products);\n  };\n\n  handleAddEvent(evt) {\n    var id = (+ new Date() + Math.floor(Math.random() * 999999)).toString(36);\n    var product = {\n      id: id,\n      name: \"\",\n      qty: 0,\n      price: \"\"\n    }\n    this.state.products.push(product);\n    this.setState(this.state.products);\n\n  }\n\n  handleProductTable(evt) {\n    var item = {\n      id: evt.target.id,\n      name: evt.target.name,\n      value: evt.target.value\n    };\nvar products = this.state.products.slice();\n  var newProducts = products.map(function(product) {\n\n    for (var key in product) {\n      if (key == item.name && product.id == item.id) {\n        product[key] = item.value;\n\n      }\n    }\n    return product;\n  });\n    this.setState({products:newProducts});\n  //  console.log(this.state.products);\n  };\n  render() {\n\n    return (\n      <div>\n        <ProductTable onProductTableUpdate={this.handleProductTable.bind(this)} onRowAdd={this.handleAddEvent.bind(this)} onRowDel={this.handleRowDel.bind(this)} products={this.state.products} filterText={this.state.filterText}/>\n      </div>\n    );\n\n  }\n\n}\n\nclass ProductTable extends React.Component {\n\n  render() {\n    var onProductTableUpdate = this.props.onProductTableUpdate;\n    var rowDel = this.props.onRowDel;\n    var filterText = this.props.filterText;\n    var product = this.props.products.map(function(product) {\n      if (product.name.indexOf(filterText) === -1) {\n        return;\n      }\n      return (<ProductRow onProductTableUpdate={onProductTableUpdate} product={product} onDelEvent={rowDel.bind(this)} key={product.id}/>)\n    });\n    return (\n      <div>\n      <button type=\"button\" onClick={this.props.onRowAdd} className=\"btn btn-success pull-right\">Add</button>\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th className=\"goodname\" onClick={function(){\n\n                 }}>Назва товару</th>\n              <th className=\"goodquant\">Кількість</th>\n              <th className=\"goodprice\">Ціна за 1 одиницю</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {product}\n          </tbody>\n\n        </table>\n                <p> Total:{this.props.products.reduce(function (accumulator, product) {\n return (accumulator + product.qty*product.price);\n   \n}, 0)} $ </p>\n      </div>\n    );\n\n  }\n\n}\n\nclass ProductRow extends React.Component {\n  onDelEvent() {\n    this.props.onDelEvent(this.props.product);\n\n  }\n  render() {\n\n    return (\n      <tr className=\"eachRow\">\n        <EditableCell onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\n          \"type\": \"name\",\n          value: this.props.product.name,\n          id: this.props.product.id\n        }}/>\n           <EditableCell onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\n          type: \"qty\",\n          value: this.props.product.qty,\n          id: this.props.product.id\n        }}/>\n        <EditableCell onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\n          type: \"price\",\n          value: this.props.product.price,\n          id: this.props.product.id\n        }}/>\n\n        <td className=\"del-cell\">\n          <input type=\"button\" onClick={this.onDelEvent.bind(this)} value=\"X\" className=\"del-btn\"/>\n        </td>\n      </tr>\n      \n    );\n\n  }\n\n}\nclass EditableCell extends React.Component {\n\n  render() {\n    return (\n      <td>\n        <input type='text' name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onProductTableUpdate}/>\n      </td>\n    );\n\n  }\n\n}\nReactDOM.render( < Products /> , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}